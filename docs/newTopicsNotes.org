#+title: Project 8.1 New Topics Notes
#+description: New Topics Notes
#+author: Ludovico Sforzo
#+setupfile: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

* Lecture info
:properties:
:unnumbered: t
:end:
+ Date: [2023-11-07]
+ Topics Covered:
* Nuance
** AuthHelper
Questa classe si occupa di fornire metodi per supportare le operazioni di autenticazione. Ha le seguenti caratteristiche:
1. *GenerateNuance*, genera una stringa basata sulla lunghezza della password. Serve a rendere ogni password unica aggiungendo un ulteriore livello di sicurezza.
2. *ValidatePasswordWithNuance*, rimuove la nuance dalla password ricevuta e confronta la password risultante con quella originale.
3. *GenerateToken*, genera un token di autenticazione combinando l'email dell'utente con una stringa casuale.
4. *GenerateRandomString*, crea una stringa casuale di una lunghezza specifica, utilizzata per generare il token. *GenerateNuance*, genera una stringa basata sulla lunghezza della password. Serve a rendere ogni password unica aggiungendo un ulteriore livello di sicurezza.
5. *ValidatePasswordWithNuance*, rimuove la nuance dalla password ricevuta e confronta la password risultante con quella originale.
6. *GenerateToken*, genera un token di autenticazione combinando l'email dell'utente con una stringa casuale.
7. *GenerateRandomString*, crea una stringa casuale di una lunghezza specifica, utilizzata per generare il token.
** Nuance
La combinazione di password e nuance è una strategia per la sicurezza delle password.
*** Funzionamento
1. *Generazione della Nuance*, la nuance è un valore aggiuntivo che vine generato nel metodo *GenerateNuance*. Viene calcolato moltiplicando la lunghezza della password per un numero casuale tra 1 e 100. Questo crea una stringa numerica che varia ad ogni generazione.
2. *Uso della Nuance*, quando un utente inva una password con nuance (ad esempio durante il login), la funzione ~ValidatePasswordWithNuance~ viene usata per verificare se la combinazione password e nuance è corretta. Il metodo rimuove la nuance dalla password fornita e confronta la password risultante con quella roiginale salvata.
*** Scopo e Utilità
+ *Aumenta la Complessitá della Password*, aggiungere una nuance aumenta la complessita della password. Questo rende più difficile per un attaccante indovinare o decifrare la password, poichè deve considerare non solo la password ma anche la nuance aggiuntiva.
+ *Protezione da alcunti tipi di attacchi*, l'uso di una nuance può proteggere contro attacchi come il *replay attack*, dove un attacante cattura una password e tente di riutilizzarla. Poiché la nuance cambia ad ogni generazione, una password catturata sarebbe inutile senza la nuance corrispondente.
*** Considerazioni Importanti
+ *Sicurezza Effetiva*, la mia implementazione non offre uno standard di sicurezza significativo, bisognerebbe combinare la nuance con l'Hashing della password.
+ *Hashing della Password*, in un sitema di autenticazione sicuro le password dveono essere salvate come hash e non in chiaro.
+ *Standard di Settore*: solitamente si usano funzioni di hashing sicure come: *bcrypt*, *scrypt* o *Argon2* per le password. Queste funzioni sono progettate per essere resistenti a vari tipi di attacco e includono la gestione della nuance (salt) in modo sicuro e standardizzato.
*** Esempio Pratico
**** SignUp
**** SignIn
* Middleware
* DTO & Automapper
** Mapping Many to Many
#+begin_src csharp
CreateMap<Item, ItemDto>()
    .ForMember(dest => dest.Softwares, opt => opt.MapFrom(src => src.ItemSoftwares.Select(isr => isr.Software))); //? map many to many for shows software data
CreateMap<ItemDto, Item>();
#+end_src
il ~.ForMember()~ serve per mappare la relazione *many to many* della relazione *ItemSoftwares*, in questo modo riusciamo a visualizzare gli items con dentro le informazioni con i loro relativi software.
* Repository Pattern
* Depenency Injection
* Map in js
* Controller & LinQ
** Linq
*** Save
In sintesi, questo metodo *Save* tenta di salvare le modifiche nel database tramite il contesto ~_context~. Poi restituisce *true* se almeno una entità è stata salvata con successo, altrimenti restituisce *false*. Questo metodo può essere utile per verificare se l'operazione di salvataggio ha avuto effetto sul database.
** Controller
** Proprietá pubbliche
Utilizzare metodi pubblici in un repository è una pratica comune. Il repository espne un'interfaccia pubblica per le operazioni sui dati.
Quando faccialmo la *DI* del repository nel controller, ho adottato le seguenti pratiche:
1. *Incapsulamento*: dichiarando la variabile del repository com ~private~, nascondo i dettagli dell'impementazione del repository dal resto dell'applicazone. In questo modo il controller non espone il repository agli altri componeti dell'applicazone.
2. *Immutabilitá*: usando la parola chiave ~readonly~, indichiamo che la variabile del repository puó essere assegnata solo durante la creazione dell'istanza del controller (cioè nel costruttore del controller) e non puó essere modificata in seguito. Questo garantisce la costanza della dipendeza iniettata.
