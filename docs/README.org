#+title: Project 8.1 Personal Notes
#+description: Personal notes for developing the Project 8.1
#+author: Ludovico Sforzo
#+setupfile: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+export_file_name: ../README.md

* Lecture info
:properties:
:unnumbered: t
:end:
+ Date: [2023-11-07]
* Developing Summary
** Design
I decided to develop the project with Code First approach, so I created before the models of my application and after with Entiry Framework I generate the databases.
This way I focused on developing the Web APIs without having too many problems with data persistence.
I developed the Project how two independent microservices, with dedicated SQLite databases.
So we have:
+ *Login Web API*, this microservice is responsible to manage SignUp and SignIn of users.
  This API, when user is logged in, authorized the operations in Lab Manager with a token.
+ *Lab Manager Web API*, this microservice is main application, it's responsible to manage a Lab Computer Science.
The two microservices communicate with each other via the frontend with token, in this way:
1. The *Login Web API* when a user is logged return a token.
2. The *Login Frontend* save this token in local storage.
3. The *Lab Web API* authenticate sigle HTTP methods with token retrieved from local storage with Lab Frontend.
** UML
This is the *UML* of project:
#+caption: Project 8.1 UML
#+name: fig. 1
#+ATTR_ORG: :width 400
[[../docs/img/project_8_1_uml.png]]
** Development order
1. Developing *Login Web API*
   1. *Model* Creation
   2. Migration and Seeding by Entiry Framework
   3. *Controller* and *CRUD*
   4. Test with Swagger
2. Developing *Lab Web API*
   1. *Model* Creation
   2. Definition of table realtionships
   3. Migration and Seeding by Entiry Framework
   4. *Controllers* and *CRUD*
   5. Test with Swagger
3. Add password with Nuance in *Login Web API*
4. Frontend
   1. Login and SignUp View
   2. Lab Admin CRUD Viewes
   3. Lab Client CRUD View
5. Auth by token for *Lab Web API CURD*
* Start the Project
To start the project, start the servers in this order:
1. *Login Web API*
2. *Lab Web API*
3. *Frontend*
#+begin_quote
NOTE:
#+end_quote
* Not Impemented
+ Test
+ Token expires
+ Booking by time slots (my Lab Web API booking by date form)
+ Logout (clean local storage)
+ Login Web API Frontend View (the frontend not work)
+ When I booking an item, I Have to change item status. Status come back available when the reservation expires.
